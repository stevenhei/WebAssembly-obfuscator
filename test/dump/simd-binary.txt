;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 add
  (func (export "i8x16_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.add)

  ;; i16x8 add
  (func (export "i16x8_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.add)

  ;; i32x4 add
  (func (export "i32x4_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.add)

  ;; i64x2 add
  (func (export "i64x2_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.add)

  ;; i8x16 sub
  (func (export "i8x16_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.sub)

  ;; i16x8 sub
  (func (export "i16x8_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.sub)

  ;; i32x4 sub
  (func (export "i32x4_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.sub)

  ;; i64x2 sub
  (func (export "i64x2_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.sub)

  ;; i16x8 mul
  (func (export "i16x8_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.mul)

  ;; i32x4 mul
  (func (export "i32x4_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.mul)

  ;; i64x2 mul
  (func (export "i64x2_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.mul)

  ;; i8x16 saturating add (signed and unsigned)
  (func (export "i8x16_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x00000003 0x00000080
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x000000ff
    i8x16.add_saturate_s)
  (func (export "i8x16_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x04000002 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i8x16.add_saturate_u)

  ;; i16x8 saturating add (signed and unsigned)
  (func (export "i16x8_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x00000003 0x00008000
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x0000fffe
    i16x8.add_saturate_s)
  (func (export "i16x8_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.add_saturate_u)

  ;; i8x16 saturating sub (signed and unsigned)
  (func (export "i8x16_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x000000fe 0x00000080
    v128.const i32x4 0x00000001 0x000000fe 0x0000007f 0x000000ff
    i8x16.sub_saturate_s)
  (func (export "i8x16_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
    v128.const i32x4 0x00020001 0xfe00fffe 0x0000007f 0x00000004
    i8x16.sub_saturate_u)

  ;; i16x8 saturating sub (signed and unsigned)
  (func (export "i16x8_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x0000fffe 0x00008000
    v128.const i32x4 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
    i16x8.sub_saturate_s)
  (func (export "i16x8_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.sub_saturate_u)

  ;; v128 and
  (func (export "v128_and_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.and)

  ;; v128 or
  (func (export "v128_or_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.or)

  ;; v128 xor
  (func (export "v128_xor_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.xor)

  ;; f32x4 min
  (func (export "f32x4_min_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.min)

  ;; f64x2 min
  (func (export "f64x2_min_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.min)

  ;; f32x4 max
  (func (export "f32x4_max_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.max)

  ;; f64x2 max
  (func (export "f64x2_max_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.max)

  ;; f32x4 add
  (func (export "f32x4_add_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.add)

  ;; f64x2 add
  (func (export "f64x2_add_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.add)

  ;; f32x4 sub
  (func (export "f32x4_sub_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.sub)

  ;; f64x2 sub
  (func (export "f64x2_sub_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.sub)

  ;; f32x4 div
  (func (export "f32x4_div_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.div)

  ;; f64x2 div
  (func (export "f64x2_div_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.div)

  ;; f32x4 mul
  (func (export "f32x4_mul_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.mul)

  ;; f64x2 mul
  (func (export "f64x2_mul_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.mul)

  ;; i8x16.narrow_i16x8_s
  (func (export "i8x16.narrow_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_s)

  ;; i8x16.narrow_i16x8_u
  (func (export "i8x16.narrow_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_u)

  ;; i16x8.narrow_i32x4_s
  (func (export "i16x8.narrow_i32x4_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_s)

  ;; i16x8.narrow_i32x4_u
  (func (export "i16x8.narrow_i32x4_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_u)

  ;; i16x8.widen_low_i8x16_s
  (func (export "i16x8.widen_low_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_s)

  ;; i16x8.widen_high_i8x16_s
  (func (export "i16x8.widen_high_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_s)

  ;; i16x8.widen_low_i8x16_u
  (func (export "i16x8.widen_low_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_u)

  ;; i16x8.widen_high_i8x16_u
  (func (export "i16x8.widen_high_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_u)

  ;; i32x4.widen_low_i16x8_s
  (func (export "i32x4.widen_low_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_s)

  ;; i32x4.widen_high_i16x8_s
  (func (export "i32x4.widen_high_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_s)

  ;; i32x4.widen_low_i16x8_u
  (func (export "i32x4.widen_low_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_u)

  ;; i32x4.widen_high_i16x8_u
  (func (export "i32x4.widen_high_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_u)

  ;; v128.andnot
  (func (export "v128.andnot") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.andnot)

  ;; i8x16.avgr_u
  (func (export "i8x16.avgr_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.avgr_u)

  ;; i16x8.avgr_u
  (func (export "i16x8.avgr_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.avgr_u)
)

(;; STDOUT ;;;

simd-binary.wasm:	file format wasm 0x1

Code Disassembly:

000408 func[0] <i8x16_add_0>:
 000409: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000412: 00 03 00 00 00 04 00 00 00 | 
 00041b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000424: 00 03 00 00 00 04 00 00 00 | 
 00042d: fd 57                      | i8x16.add
 00042f: 0b                         | end
000431 func[1] <i16x8_add_0>:
 000432: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00043b: 00 03 00 00 00 04 00 00 00 | 
 000444: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00044d: 00 03 00 00 00 04 00 00 00 | 
 000456: fd 68                      | i16x8.add
 000458: 0b                         | end
00045a func[2] <i32x4_add_0>:
 00045b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000464: 00 03 00 00 00 04 00 00 00 | 
 00046d: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000476: 00 03 00 00 00 04 00 00 00 | 
 00047f: fd 79                      | i32x4.add
 000481: 0b                         | end
000483 func[3] <i64x2_add_0>:
 000484: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00048d: 00 03 00 00 00 04 00 00 00 | 
 000496: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00049f: 00 03 00 00 00 04 00 00 00 | 
 0004a8: fd 8a 01                   | i64x2.add
 0004ab: 0b                         | end
0004ad func[4] <i8x16_sub_0>:
 0004ae: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004b7: 00 03 00 00 00 04 00 00 00 | 
 0004c0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004c9: 00 03 00 00 00 04 00 00 00 | 
 0004d2: fd 5a                      | i8x16.sub
 0004d4: 0b                         | end
0004d6 func[5] <i16x8_sub_0>:
 0004d7: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004e0: 00 03 00 00 00 04 00 00 00 | 
 0004e9: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004f2: 00 03 00 00 00 04 00 00 00 | 
 0004fb: fd 6b                      | i16x8.sub
 0004fd: 0b                         | end
0004ff func[6] <i32x4_sub_0>:
 000500: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000509: 00 03 00 00 00 04 00 00 00 | 
 000512: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00051b: 00 03 00 00 00 04 00 00 00 | 
 000524: fd 7c                      | i32x4.sub
 000526: 0b                         | end
000528 func[7] <i64x2_sub_0>:
 000529: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000532: 00 03 00 00 00 04 00 00 00 | 
 00053b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000544: 00 03 00 00 00 04 00 00 00 | 
 00054d: fd 8d 01                   | i64x2.sub
 000550: 0b                         | end
000552 func[8] <i16x8_mul_0>:
 000553: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00055c: 00 03 00 00 00 04 00 00 00 | 
 000565: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00056e: 00 03 00 00 00 04 00 00 00 | 
 000577: fd 6e                      | i16x8.mul
 000579: 0b                         | end
00057b func[9] <i32x4_mul_0>:
 00057c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000585: 00 03 00 00 00 04 00 00 00 | 
 00058e: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000597: 00 03 00 00 00 04 00 00 00 | 
 0005a0: fd 7f                      | i32x4.mul
 0005a2: 0b                         | end
0005a4 func[10] <i64x2_mul_0>:
 0005a5: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0005ae: 00 03 00 00 00 04 00 00 00 | 
 0005b7: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0005c0: 00 03 00 00 00 04 00 00 00 | 
 0005c9: fd 90 01                   | i64x2.mul
 0005cc: 0b                         | end
0005ce func[11] <i8x16_add_saturate_signed_0>:
 0005cf: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x00000003 0x00000080
 0005d8: 00 03 00 00 00 80 00 00 00 | 
 0005e1: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x000000ff
 0005ea: 00 03 00 00 00 ff 00 00 00 | 
 0005f3: fd 58                      | i8x16.add_saturate_s
 0005f5: 0b                         | end
0005f7 func[12] <i8x16_add_saturate_unsigned_0>:
 0005f8: fd 02 01 00 ff 00 02 00 00 | v128.const 0x00ff0001 0x04000002 0x00000003 0x00000004
 000601: 04 03 00 00 00 04 00 00 00 | 
 00060a: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000613: fe 03 00 00 00 04 00 00 00 | 
 00061c: fd 59                      | i8x16.add_saturate_u
 00061e: 0b                         | end
000620 func[13] <i16x8_add_saturate_signed_0>:
 000621: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x00000003 0x00008000
 00062a: 00 03 00 00 00 00 80 00 00 | 
 000633: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x0000fffe
 00063c: 00 03 00 00 00 fe ff 00 00 | 
 000645: fd 69                      | i16x8.add_saturate_s
 000647: 0b                         | end
000649 func[14] <i16x8_add_saturate_unsigned_0>:
 00064a: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 000653: 04 03 00 00 00 04 00 00 00 | 
 00065c: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000665: fe 03 00 00 00 04 00 00 00 | 
 00066e: fd 6a                      | i16x8.add_saturate_u
 000670: 0b                         | end
000672 func[15] <i8x16_sub_saturate_signed_0>:
 000673: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x000000fe 0x00000080
 00067c: 00 fe 00 00 00 80 00 00 00 | 
 000685: fd 02 01 00 00 00 fe 00 00 | v128.const 0x00000001 0x000000fe 0x0000007f 0x000000ff
 00068e: 00 7f 00 00 00 ff 00 00 00 | 
 000697: fd 5b                      | i8x16.sub_saturate_s
 000699: 0b                         | end
00069b func[16] <i8x16_sub_saturate_unsigned_0>:
 00069c: fd 02 01 00 ff 00 7f 00 00 | v128.const 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
 0006a5: 04 fe ff 00 00 04 00 00 00 | 
 0006ae: fd 02 01 00 02 00 fe ff 00 | v128.const 0x00020001 0xfe00fffe 0x0000007f 0x00000004
 0006b7: fe 7f 00 00 00 04 00 00 00 | 
 0006c0: fd 5c                      | i8x16.sub_saturate_u
 0006c2: 0b                         | end
0006c4 func[17] <i16x8_sub_saturate_signed_0>:
 0006c5: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x0000fffe 0x00008000
 0006ce: 00 fe ff 00 00 00 80 00 00 | 
 0006d7: fd 02 01 00 00 00 fe ff 00 | v128.const 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
 0006e0: 00 ff 7f 00 00 fe ff 00 00 | 
 0006e9: fd 6c                      | i16x8.sub_saturate_s
 0006eb: 0b                         | end
0006ed func[18] <i16x8_sub_saturate_unsigned_0>:
 0006ee: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 0006f7: 04 03 00 00 00 04 00 00 00 | 
 000700: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000709: fe 03 00 00 00 04 00 00 00 | 
 000712: fd 6d                      | i16x8.sub_saturate_u
 000714: 0b                         | end
000716 func[19] <v128_and_0>:
 000717: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000720: 00 03 00 00 44 04 00 00 00 | 
 000729: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000732: 00 03 00 00 00 04 00 00 55 | 
 00073b: fd 4d                      | v128.and
 00073d: 0b                         | end
00073f func[20] <v128_or_0>:
 000740: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000749: 00 03 00 00 44 04 00 00 00 | 
 000752: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 00075b: 00 03 00 00 00 04 00 00 55 | 
 000764: fd 4e                      | v128.or
 000766: 0b                         | end
000768 func[21] <v128_xor_0>:
 000769: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000772: 00 03 00 00 44 04 00 00 00 | 
 00077b: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000784: 00 03 00 00 00 04 00 00 55 | 
 00078d: fd 4f                      | v128.xor
 00078f: 0b                         | end
000791 func[22] <f32x4_min_0>:
 000792: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 00079b: ff 00 50 9a 44 00 00 80 bf | 
 0007a4: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 0007ad: 3f 00 50 9a 44 00 00 80 3f | 
 0007b6: fd 9e 01                   | f32x4.min
 0007b9: 0b                         | end
0007bb func[23] <f64x2_min_0>:
 0007bc: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0007c5: 00 00 00 00 00 00 00 f8 ff | 
 0007ce: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0007d7: c0 00 00 00 00 00 00 f0 3f | 
 0007e0: fd a9 01                   | f64x2.min
 0007e3: 0b                         | end
0007e5 func[24] <f32x4_max_0>:
 0007e6: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0007ef: ff 00 50 9a 44 00 00 80 bf | 
 0007f8: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 000801: 3f 00 50 9a 44 00 00 80 3f | 
 00080a: fd 9f 01                   | f32x4.max
 00080d: 0b                         | end
00080f func[25] <f64x2_max_0>:
 000810: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000819: 00 00 00 00 00 00 00 f8 ff | 
 000822: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00082b: c0 00 00 00 00 00 00 f0 3f | 
 000834: fd aa 01                   | f64x2.max
 000837: 0b                         | end
000839 func[26] <f32x4_add_0>:
 00083a: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 000843: ff 00 50 9a 44 00 50 9a c4 | 
 00084c: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000855: 3f 00 00 80 3f 00 00 c0 3f | 
 00085e: fd 9a 01                   | f32x4.add
 000861: 0b                         | end
000863 func[27] <f64x2_add_0>:
 000864: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 00086d: 3f 00 00 00 00 00 00 f8 ff | 
 000876: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00087f: c0 00 00 00 00 00 00 f0 3f | 
 000888: fd a5 01                   | f64x2.add
 00088b: 0b                         | end
00088d func[28] <f32x4_sub_0>:
 00088e: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 000897: ff 00 50 9a 44 00 50 9a c4 | 
 0008a0: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0008a9: 3f 00 00 80 3f 00 00 c0 3f | 
 0008b2: fd 9b 01                   | f32x4.sub
 0008b5: 0b                         | end
0008b7 func[29] <f64x2_sub_0>:
 0008b8: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 0008c1: 3f 00 00 00 00 00 00 f8 ff | 
 0008ca: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0008d3: c0 00 00 00 00 00 00 f0 3f | 
 0008dc: fd a6 01                   | f64x2.sub
 0008df: 0b                         | end
0008e1 func[30] <f32x4_div_0>:
 0008e2: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 0008eb: ff 00 00 c0 3f 00 00 40 c0 | 
 0008f4: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0008fd: 3f 00 00 80 3f 00 00 c0 3f | 
 000906: fd 9d 01                   | f32x4.div
 000909: 0b                         | end
00090b func[31] <f64x2_div_0>:
 00090c: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 000915: 3f 00 00 00 00 00 00 08 c0 | 
 00091e: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 000927: 3f 00 00 00 00 00 00 f8 3f | 
 000930: fd a8 01                   | f64x2.div
 000933: 0b                         | end
000935 func[32] <f32x4_mul_0>:
 000936: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 00093f: ff 00 00 c0 3f 00 00 40 c0 | 
 000948: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000951: 3f 00 00 80 3f 00 00 c0 3f | 
 00095a: fd 9c 01                   | f32x4.mul
 00095d: 0b                         | end
00095f func[33] <f64x2_mul_0>:
 000960: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 000969: 3f 00 00 00 00 00 00 08 c0 | 
 000972: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 00097b: 3f 00 00 00 00 00 00 f8 3f | 
 000984: fd a7 01                   | f64x2.mul
 000987: 0b                         | end
000989 func[34] <i8x16.narrow_i16x8_s>:
 00098a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000993: 00 03 00 00 00 04 00 00 00 | 
 00099c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009a5: 00 03 00 00 00 04 00 00 00 | 
 0009ae: fd c6 01                   | i8x16.narrow_i16x8_s
 0009b1: 0b                         | end
0009b3 func[35] <i8x16.narrow_i16x8_u>:
 0009b4: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009bd: 00 03 00 00 00 04 00 00 00 | 
 0009c6: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009cf: 00 03 00 00 00 04 00 00 00 | 
 0009d8: fd c7 01                   | i8x16.narrow_i16x8_u
 0009db: 0b                         | end
0009dd func[36] <i16x8.narrow_i32x4_s>:
 0009de: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009e7: 00 03 00 00 00 04 00 00 00 | 
 0009f0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009f9: 00 03 00 00 00 04 00 00 00 | 
 000a02: fd c8 01                   | i16x8.narrow_i32x4_s
 000a05: 0b                         | end
000a07 func[37] <i16x8.narrow_i32x4_u>:
 000a08: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a11: 00 03 00 00 00 04 00 00 00 | 
 000a1a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a23: 00 03 00 00 00 04 00 00 00 | 
 000a2c: fd c9 01                   | i16x8.narrow_i32x4_u
 000a2f: 0b                         | end
000a31 func[38] <i16x8.widen_low_i8x16_s>:
 000a32: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a3b: 00 03 00 00 00 04 00 00 00 | 
 000a44: fd ca 01                   | i16x8.widen_low_i8x16_s
 000a47: 0b                         | end
000a49 func[39] <i16x8.widen_high_i8x16_s>:
 000a4a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a53: 00 03 00 00 00 04 00 00 00 | 
 000a5c: fd cb 01                   | i16x8.widen_high_i8x16_s
 000a5f: 0b                         | end
000a61 func[40] <i16x8.widen_low_i8x16_u>:
 000a62: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a6b: 00 03 00 00 00 04 00 00 00 | 
 000a74: fd cc 01                   | i16x8.widen_low_i8x16_u
 000a77: 0b                         | end
000a79 func[41] <i16x8.widen_high_i8x16_u>:
 000a7a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a83: 00 03 00 00 00 04 00 00 00 | 
 000a8c: fd cd 01                   | i16x8.widen_high_i8x16_u
 000a8f: 0b                         | end
000a91 func[42] <i32x4.widen_low_i16x8_s>:
 000a92: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a9b: 00 03 00 00 00 04 00 00 00 | 
 000aa4: fd ce 01                   | i32x4.widen_low_i16x8_s
 000aa7: 0b                         | end
000aa9 func[43] <i32x4.widen_high_i16x8_s>:
 000aaa: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000ab3: 00 03 00 00 00 04 00 00 00 | 
 000abc: fd cf 01                   | i32x4.widen_high_i16x8_s
 000abf: 0b                         | end
000ac1 func[44] <i32x4.widen_low_i16x8_u>:
 000ac2: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000acb: 00 03 00 00 00 04 00 00 00 | 
 000ad4: fd d0 01                   | i32x4.widen_low_i16x8_u
 000ad7: 0b                         | end
000ad9 func[45] <i32x4.widen_high_i16x8_u>:
 000ada: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000ae3: 00 03 00 00 00 04 00 00 00 | 
 000aec: fd d1 01                   | i32x4.widen_high_i16x8_u
 000aef: 0b                         | end
000af1 func[46] <v128.andnot>:
 000af2: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000afb: 00 03 00 00 00 04 00 00 00 | 
 000b04: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b0d: 00 03 00 00 00 04 00 00 00 | 
 000b16: fd d8 01                   | v128.andnot
 000b19: 0b                         | end
000b1b func[47] <i8x16.avgr_u>:
 000b1c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b25: 00 03 00 00 00 04 00 00 00 | 
 000b2e: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b37: 00 03 00 00 00 04 00 00 00 | 
 000b40: fd d9 01                   | i8x16.avgr_u
 000b43: 0b                         | end
000b45 func[48] <i16x8.avgr_u>:
 000b46: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b4f: 00 03 00 00 00 04 00 00 00 | 
 000b58: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b61: 00 03 00 00 00 04 00 00 00 | 
 000b6a: fd da 01                   | i16x8.avgr_u
 000b6d: 0b                         | end
;;; STDOUT ;;)
