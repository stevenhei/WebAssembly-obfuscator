;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 neg
  (func (export "i8x16_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.neg)

  ;; i16x8 neg
  (func (export "i16x8_neg_0") (result v128)
    v128.const i32x4 0x0000ffff 0x00007fff 0x00000003 0x00000004
    i16x8.neg)

  ;; i32x4 neg
  (func (export "i32x4_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.neg)

  ;; i64x2 neg
  (func (export "i64x2_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.neg)

  ;; v128 not
  (func (export "v128_not_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    v128.not)

  ;; i8x16 any_true
  (func (export "i8x16_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i8x16.any_true)

  ;; i16x8 any_true
  (func (export "i16x8_any_true_0") (result i32)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    i16x8.any_true)

  ;; i32x4 any_true
  (func (export "i32x4_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.any_true)

  ;; i8x16 all_true
  (func (export "i8x16_all_true_0") (result i32)
    v128.const i32x4 0x01020304 0x01050706 0x10020403 0x20103004
    i8x16.all_true)

  ;; i16x8 all_true
  (func (export "i16x8_all_true_0") (result i32)
    v128.const i32x4 0x00040004 0x00030003 0x00020002 0x00010001
    i16x8.all_true)

  ;; i32x4 all_true
  (func (export "i32x4_all_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.all_true)

  ;; f32x4 neg
  (func (export "f32x4_neg_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.neg)

  ;; f64x2 neg
  (func (export "f64x2_neg_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    f64x2.neg)
  (func (export "f64x2_neg_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.neg)

  ;; f32x4 abs
  (func (export "f32x4_abs_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.abs)

  ;; f64x2 abs
  (func (export "f64x2_abs_0") (result v128)
    v128.const i32x4 0x00000000 0x80000000 0x00000000 0xfff80000
    f64x2.abs)
  (func (export "f64x2_abs_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.abs)

  ;; f32x4 sqrt
  (func (export "f32x4_sqrt_0") (result v128)
    v128.const i32x4 0xbf800000 0xffc00000 0x40800000 0x41100000
    f32x4.sqrt)

  ;; f64x2 sqrt
  (func (export "f64x2_sqrt_0") (result v128)
    v128.const i32x4 0x00000000 0xbff00000 0x00000000 0xfff80000
    f64x2.sqrt)
  (func (export "f64x2_sqrt_1") (result v128)
    v128.const i32x4 0x00000000 0x40100000 0x00000000 0x40220000
    f64x2.sqrt)

  ;; f32x4 convert_i32x4_s
  (func (export "f32x4_convert_i32x4_s_0") (result v128)
    v128.const i32x4 0x00000001 0xffffffff 0x00000000 0x00000003
    f32x4.convert_i32x4_s)

  ;; f32x4 convert_i32x4_u
  (func (export "f32x4_convert_i32x4_u_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000000 0x00000003
    f32x4.convert_i32x4_u)

  ;; i32x4 trunc_sat_f32x4_s
  (func (export "i32x4_trunc_sat_f32x4_s_0") (result v128)
    v128.const i32x4 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_s)

  ;; i32x4 trunc_sat_f32x4_u
  (func (export "i32x4_trunc_sat_f32x4_u_0") (result v128)
    v128.const i32x4 0x3fc00000 0x40900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_u)
)
(;; STDOUT ;;;

simd-unary.wasm:	file format wasm 0x1

Code Disassembly:

0001db func[0] <i8x16_neg_0>:
 0001dc: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0001e5: 00 03 00 00 00 04 00 00 00 | 
 0001ee: fd 51                      | i8x16.neg
 0001f0: 0b                         | end
0001f2 func[1] <i16x8_neg_0>:
 0001f3: fd 02 ff ff 00 00 ff 7f 00 | v128.const 0x0000ffff 0x00007fff 0x00000003 0x00000004
 0001fc: 00 03 00 00 00 04 00 00 00 | 
 000205: fd 62                      | i16x8.neg
 000207: 0b                         | end
000209 func[2] <i32x4_neg_0>:
 00020a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000213: 00 03 00 00 00 04 00 00 00 | 
 00021c: fd 73                      | i32x4.neg
 00021e: 0b                         | end
000220 func[3] <i64x2_neg_0>:
 000221: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00022a: 00 03 00 00 00 04 00 00 00 | 
 000233: fd 84 01                   | i64x2.neg
 000236: 0b                         | end
000238 func[4] <v128_not_0>:
 000239: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000242: 00 03 00 00 00 04 00 00 00 | 
 00024b: fd 4c                      | v128.not
 00024d: 0b                         | end
00024f func[5] <i8x16_any_true_0>:
 000250: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000259: 00 03 00 00 00 04 00 00 00 | 
 000262: fd 52                      | i8x16.any_true
 000264: 0b                         | end
000266 func[6] <i16x8_any_true_0>:
 000267: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0x00000000
 000270: 00 00 00 00 00 00 00 00 00 | 
 000279: fd 63                      | i16x8.any_true
 00027b: 0b                         | end
00027d func[7] <i32x4_any_true_0>:
 00027e: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000287: 00 03 00 00 00 04 00 00 00 | 
 000290: fd 74                      | i32x4.any_true
 000292: 0b                         | end
000294 func[8] <i8x16_all_true_0>:
 000295: fd 02 04 03 02 01 06 07 05 | v128.const 0x01020304 0x01050706 0x10020403 0x20103004
 00029e: 01 03 04 02 10 04 30 10 20 | 
 0002a7: fd 53                      | i8x16.all_true
 0002a9: 0b                         | end
0002ab func[9] <i16x8_all_true_0>:
 0002ac: fd 02 04 00 04 00 03 00 03 | v128.const 0x00040004 0x00030003 0x00020002 0x00010001
 0002b5: 00 02 00 02 00 01 00 01 00 | 
 0002be: fd 64                      | i16x8.all_true
 0002c0: 0b                         | end
0002c2 func[10] <i32x4_all_true_0>:
 0002c3: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 0002cc: 00 03 00 00 00 04 00 00 00 | 
 0002d5: fd 75                      | i32x4.all_true
 0002d7: 0b                         | end
0002d9 func[11] <f32x4_neg_0>:
 0002da: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0002e3: ff 00 50 9a 44 00 00 80 bf | 
 0002ec: fd 96 01                   | f32x4.neg
 0002ef: 0b                         | end
0002f1 func[12] <f64x2_neg_0>:
 0002f2: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0002fb: 00 00 00 00 00 00 00 f8 ff | 
 000304: fd a1 01                   | f64x2.neg
 000307: 0b                         | end
000309 func[13] <f64x2_neg_1>:
 00030a: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000313: c0 00 00 00 00 00 00 f0 3f | 
 00031c: fd a1 01                   | f64x2.neg
 00031f: 0b                         | end
000321 func[14] <f32x4_abs_0>:
 000322: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 00032b: ff 00 50 9a 44 00 00 80 bf | 
 000334: fd 95 01                   | f32x4.abs
 000337: 0b                         | end
000339 func[15] <f64x2_abs_0>:
 00033a: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x80000000 0x00000000 0xfff80000
 000343: 80 00 00 00 00 00 00 f8 ff | 
 00034c: fd a0 01                   | f64x2.abs
 00034f: 0b                         | end
000351 func[16] <f64x2_abs_1>:
 000352: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00035b: c0 00 00 00 00 00 00 f0 3f | 
 000364: fd a0 01                   | f64x2.abs
 000367: 0b                         | end
000369 func[17] <f32x4_sqrt_0>:
 00036a: fd 02 00 00 80 bf 00 00 c0 | v128.const 0xbf800000 0xffc00000 0x40800000 0x41100000
 000373: ff 00 00 80 40 00 00 10 41 | 
 00037c: fd 97 01                   | f32x4.sqrt
 00037f: 0b                         | end
000381 func[18] <f64x2_sqrt_0>:
 000382: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0xbff00000 0x00000000 0xfff80000
 00038b: bf 00 00 00 00 00 00 f8 ff | 
 000394: fd a2 01                   | f64x2.sqrt
 000397: 0b                         | end
000399 func[19] <f64x2_sqrt_1>:
 00039a: fd 02 00 00 00 00 00 00 10 | v128.const 0x00000000 0x40100000 0x00000000 0x40220000
 0003a3: 40 00 00 00 00 00 00 22 40 | 
 0003ac: fd a2 01                   | f64x2.sqrt
 0003af: 0b                         | end
0003b1 func[20] <f32x4_convert_i32x4_s_0>:
 0003b2: fd 02 01 00 00 00 ff ff ff | v128.const 0x00000001 0xffffffff 0x00000000 0x00000003
 0003bb: ff 00 00 00 00 03 00 00 00 | 
 0003c4: fd af 01                   | f32x4.convert_i32x4_s
 0003c7: 0b                         | end
0003c9 func[21] <f32x4_convert_i32x4_u_0>:
 0003ca: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000000 0x00000003
 0003d3: 00 00 00 00 00 03 00 00 00 | 
 0003dc: fd b0 01                   | f32x4.convert_i32x4_u
 0003df: 0b                         | end
0003e1 func[22] <i32x4_trunc_sat_f32x4_s_0>:
 0003e2: fd 02 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
 0003eb: c0 00 00 c0 ff 9a 59 9a 44 | 
 0003f4: fd ab 01                   | i32x4.trunc_sat_f32x4_s
 0003f7: 0b                         | end
0003f9 func[23] <i32x4_trunc_sat_f32x4_u_0>:
 0003fa: fd 02 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0x40900000 0xffc00000 0x449a599a
 000403: 40 00 00 c0 ff 9a 59 9a 44 | 
 00040c: fd ac 01                   | i32x4.trunc_sat_f32x4_u
 00040f: 0b                         | end
;;; STDOUT ;;)
